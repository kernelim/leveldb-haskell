name:                leveldb-haskell
version:             0.6.3.1
synopsis:            Haskell bindings to LevelDB
homepage:            http://github.com/kim/leveldb-haskell
bug-reports:         http://github.com/kim/leveldb-haskell/issues
license:             BSD3
license-file:        LICENSE
author:              Kim Altintop et.al. (see AUTHORS file)
maintainer:          kim.altintop@gmail.com
copyright:           Copyright (c) 2012-2014 The leveldb-haskell Authors
category:            Database, FFI
stability:           Experimental
build-type:          Configure
cabal-version:       >=1.10
tested-with:         GHC == 7.4.2, GHC == 7.6.4, GHC == 7.8.3, GHC == 7.10.1
description:
    From <http://code.google.com/p/snappy>:
    .
    LevelDB is a fast key-value storage library written at Google that provides
    an ordered mapping from string keys to string values.
    .
    .
    This library provides a Haskell language binding to LeveldDB. It is in very
    early stage and has seen very limited testing.
    .
    Note: the LevelDB source code is bundled with this package and built as
    part of the installation. To enable compression, the snappy library needs to
    be installed on the target system.

extra-source-files:  Readme.md, AUTHORS, CHANGELOG, examples/*.hs
                   , configure
                   , configure.ac
                   , leveldb-haskell.buildinfo.in
                   , cbits/leveldb/include/leveldb/*.h
                   , cbits/leveldb/db/*.h
                   , cbits/leveldb/db/*.cc
                   , cbits/leveldb/table/*.h
                   , cbits/leveldb/table/*.cc
                   , cbits/leveldb/port/*.h
                   , cbits/leveldb/port/*.cc
                   , cbits/leveldb/util/*.h
                   , cbits/leveldb/util/*.cc
                   , cbits/leveldb/helpers/memenv/*.h
                   , cbits/leveldb/helpers/memenv/*.cc
                   , examples/*.hs

source-repository head
  type:     git
  location: git://github.com/kim/leveldb-haskell.git

Flag Examples
  description:      Build examples
  default:          False
  manual:           True

library
  exposed-modules:  Database.LevelDB
                  , Database.LevelDB.Base
                  , Database.LevelDB.C
                  , Database.LevelDB.Internal
                  , Database.LevelDB.Iterator
                  , Database.LevelDB.MonadResource
                  , Database.LevelDB.Streaming
                  , Database.LevelDB.Types
                  , Data.Stream.Monadic

  default-language: Haskell2010

  build-depends:    base >= 3 && < 5
                  , bytestring
                  , data-default
                  , exceptions >= 0.6
                  , filepath
                  , resourcet > 0.3.2
                  , transformers

  ghc-options:      -Wall -rtsopts -funbox-strict-fields -pgml g++
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   src
  extra-libraries:  stdc++
  include-dirs:     cbits/leveldb
                    cbits/leveldb/include

  cc-options:       -fno-builtin-memcmp -DLEVELDB_PLATFORM_POSIX

  if os(linux)
    cc-options:     -DOS_LINUX
  if os(darwin)
    cc-options:     -DOS_MACOSX
  if os(solaris)
    cc-options:     -D_REENTRANT -DOS_SOLARIS
  if os(freebsd)
    cc-options:     -D_REENTRANT -DOS_FREEBSD

  c-sources:        cbits/leveldb/db/builder.cc
                    cbits/leveldb/db/c.cc
                    cbits/leveldb/db/db_impl.cc
                    cbits/leveldb/db/db_iter.cc
                    cbits/leveldb/db/dbformat.cc
                    cbits/leveldb/db/filename.cc
                    cbits/leveldb/db/log_reader.cc
                    cbits/leveldb/db/log_writer.cc
                    cbits/leveldb/db/memtable.cc
                    cbits/leveldb/db/repair.cc
                    cbits/leveldb/db/table_cache.cc
                    cbits/leveldb/db/version_edit.cc
                    cbits/leveldb/db/version_set.cc
                    cbits/leveldb/db/write_batch.cc
                    cbits/leveldb/helpers/memenv/memenv.cc
                    cbits/leveldb/port/port_posix.cc
                    cbits/leveldb/table/block.cc
                    cbits/leveldb/table/block_builder.cc
                    cbits/leveldb/table/format.cc
                    cbits/leveldb/table/iterator.cc
                    cbits/leveldb/table/merger.cc
                    cbits/leveldb/table/table.cc
                    cbits/leveldb/table/table_builder.cc
                    cbits/leveldb/table/two_level_iterator.cc
                    cbits/leveldb/util/arena.cc
                    cbits/leveldb/util/cache.cc
                    cbits/leveldb/util/coding.cc
                    cbits/leveldb/util/comparator.cc
                    cbits/leveldb/util/crc32c.cc
                    cbits/leveldb/util/env.cc
                    cbits/leveldb/util/env_posix.cc
                    cbits/leveldb/util/hash.cc
                    cbits/leveldb/util/histogram.cc
                    cbits/leveldb/util/logging.cc
                    cbits/leveldb/util/options.cc
                    cbits/leveldb/util/status.cc

executable leveldb-example-comparator
  main-is:          comparator.hs

  default-language: Haskell2010

  build-depends:    base >= 3 && < 5
                  , transformers
                  , data-default
                  , leveldb-haskell

  ghc-options:      -Wall -O -rtsopts
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   examples

  if flag(Examples)
    buildable:      True
  else
    buildable:      False

executable leveldb-example-features
  main-is:          features.hs

  default-language: Haskell2010

  build-depends:    base >= 3 && < 5
                  , bytestring
                  , transformers
                  , resourcet > 0.3.2
                  , data-default
                  , leveldb-haskell

  ghc-options:      -Wall -O -rtsopts
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   examples

  if flag(Examples)
    buildable:      True
  else
    buildable:      False

executable leveldb-example-filterpolicy
  main-is:          filterpolicy.hs

  default-language: Haskell2010

  build-depends:    base >= 3 && < 5
                  , transformers
                  , data-default
                  , leveldb-haskell

  ghc-options:      -Wall -O -rtsopts
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   examples

  if flag(Examples)
    buildable:      True
  else
    buildable:      False

executable leveldb-example-iterforkio
  main-is:          iterforkio.hs

  default-language: Haskell2010

  build-depends:    base >= 3 && < 5
                  , async
                  , bytestring
                  , data-default
                  , leveldb-haskell

  ghc-options:      -Wall -O -rtsopts
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   examples

  if flag(Examples)
    buildable:      True
  else
    buildable:      False

test-suite leveldb-properties
  type:             exitcode-stdio-1.0
  main-is:          Main.hs
  hs-source-dirs:   test

  other-modules:    Test.Streaming

  default-language: Haskell2010

  build-depends:    base
                  , bytestring
                  , data-default
                  , directory
                  , exceptions       >= 0.6
                  , mtl
                  , leveldb-haskell
                  , QuickCheck       >= 2.7
                  , tasty            >= 0.10
                  , tasty-quickcheck >= 0.8
                  , temporary
                  , transformers

  ghc-options:      -Wall -O -rtsopts -threaded -with-rtsopts=-N
